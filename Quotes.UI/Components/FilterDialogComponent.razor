@using Microsoft.AspNetCore.Components;
@using MudBlazor;
@using Quotes.UI.Service.Dto.ApiRequest;

<MudDialog>
    <TitleContent>
        <MudItem Class="d-flex justify-content-start align-items-center">
            <MudIcon Size="Size.Medium" Icon="@Icons.Material.Rounded.FilterAlt" Class="mr-3 mb-n1" />
            <MudText Typo="Typo.h6">Filters</MudText>
        </MudItem>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="@Filter.AuthorFilter" Label="Search Author" />
        <MudTextField @bind-Value="@Filter.InspirationalQuoteFilter" Label="Search Quote" />
        @* <MudTextField @bind-Value="@Filter.TagFilter" Label="Filter Tag" /> *@
        <ChipComponent Tags="@Filter.TagsFilter" Callback="@((a)=>RemoveTag(a))" IsClosable="true" />
        <MudItem Class="d-flex justify-content-around align-items-center">
            <MudTextField FullWidth="false" T="string" Label="Tag" @bind-Value="@FilterText" />
            <MudButton Size="Size.Small" StartIcon="@Icons.Material.Filled.Add" OnClick="AddTag" Color="Color.Primary" >
                Add Tag
                </MudButton>
        </MudItem>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="Color.Surface">Cancel</MudButton>
        <MudButton OnClick="ClearFilters" Variant="Variant.Filled" DropShadow="true" Color="Color.Error">Clear Filters</MudButton>
        <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="OnApplyFilter">Apply Filters</MudButton>
    </DialogActions>
</MudDialog>

@code {



    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public QuoteFilter Filter { get; set; } = new();

    private string FilterText { get; set; }

    private void Cancel() => MudDialog.Cancel();

    private void OnApplyFilter()
    {
        MudDialog.Close(DialogResult.Ok(Filter));
    }
    private void ClearFilters()
    {
        Filter = new();
        MudDialog.Close(DialogResult.Ok(Filter));
    }

    public void AddTag()
    {
        if (!string.IsNullOrWhiteSpace(FilterText) && !Filter.TagsFilter.Contains(FilterText))
        {
            Filter.TagsFilter.Add(FilterText.Trim());
            FilterText = null;
            StateHasChanged();
        }
    }

    public void RemoveTag(object data)
    {
        var tag = data.ToString();
        if (!string.IsNullOrWhiteSpace(tag) && Filter.TagsFilter.Contains(tag))
        {
            Filter.TagsFilter.Remove(tag);
            StateHasChanged();
        }
    }
}
